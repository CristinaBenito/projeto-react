{"version":3,"sources":["logo.svg","components/nav.js","components/modal-login.js","components/info-caffeex.js","components/slogan.js","components/buttons-info.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","className","src","id","ModalLogin","action","type","value","placeholder","InfoCaffeex","Slogan","ButtonsInfo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,0FC8C5BC,G,gBA5CH,SAAAC,GACR,OACI,yBAAKC,UAAU,uEACX,6BAASA,UAAU,mBACf,yBAAKC,IAAI,mCAET,wBAAID,UAAU,YACV,2CAGJ,wBAAIA,UAAU,YACV,yCAGJ,wBAAIA,UAAU,YACV,2CAGJ,wBAAIA,UAAU,YACV,wCAGJ,wBAAIA,UAAU,YACV,oCAGJ,wBAAIA,UAAU,sBACV,gDAGJ,4BACI,4BAAI,4BAAQA,UAAU,sDAAsDE,GAAG,SAA3E,YAGR,uBAAGF,UAAU,QACT,8BACA,8BACA,mCCpBLG,EAjBI,SAAAJ,GACf,OACI,yBAAKG,GAAG,UAAUF,UAAU,SAExB,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,SAAhB,QACA,0BAAMI,OAAO,oBACT,2BAAOC,KAAK,OAAOH,GAAG,OAAOI,MAAM,GAAGC,YAAY,eAClD,2BAAOF,KAAK,OAAOH,GAAG,MAAMI,MAAM,GAAGC,YAAY,UACjD,2BAAOF,KAAK,SAASC,MAAM,eC4ChCE,EArDK,SAAAT,GAChB,OACI,6BACI,yBAAKC,UAAU,qGACX,yBAAKA,UAAU,QACX,0FAIR,6BAASA,UAAU,kDACf,yBAAKA,UAAU,YACX,wBAAIA,UAAU,SAAd,gBACA,sQAKJ,yBAAKA,UAAU,YACX,wBAAIA,UAAU,SAAd,WACA,6OAIJ,yBAAKA,UAAU,YACX,wBAAIA,UAAU,SAAd,cACA,kQAOR,6BAASA,UAAU,cACf,yBAAKC,IAAI,8BAIb,6BAASD,UAAU,uFACf,yBAAKA,UAAU,QACX,iEACA,uBAAGA,UAAU,WAAb,+OC7BLS,EAXA,SAAAV,GACX,OACI,yBAAKC,UAAU,UACX,wBAAIA,UAAU,cAAd,uGCSGU,EAZK,SAAAX,GAChB,OACI,yBAAKC,UAAU,WACX,4BAAQA,UAAU,yCAAlB,mCACA,4BAAQA,UAAU,wDAAuD,yBAAKC,IAAI,0BAAlF,gBCmCGU,MA/Bf,WACE,OACE,yBAAKX,UAAU,aACP,yBAAKA,UAAU,MACX,yBAAKA,UAAU,WAEX,gCACE,kBAAC,EAAD,OAIF,yBAAKA,UAAU,iGACX,kBAAC,EAAD,MAEA,kBAAC,EAAD,SAKZ,kBAAC,EAAD,MAGA,iCAIA,kBAAC,EAAD,QCxBQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6adcda8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Nav = props => {\n    return (\n        <nav className='nav my-flex my-justify-content-space-around text-white my-width-100'>\n            <section className='nav-image teste'>\n                <img src='./assets/imgs/logo-caffeex.png' />\n\n                <ul className='my-hover'>\n                    <li>SOLUÇAO</li>\n                </ul>\n\n                <ul className='my-hover'>\n                    <li>CLIENTES</li>\n                </ul>\n\n                <ul className='my-hover'>\n                    <li>QUEM SOMOS</li>\n                </ul>\n\n                <ul className='my-hover'>\n                    <li>CONTATO</li>\n                </ul>\n\n                <ul className='my-hover'>\n                    <li>FAQ</li>\n                </ul>\n\n                <ul className='my-hover my-margin'>\n                    <li>VERSÃO TRIAL</li>\n                </ul>\n\n                <ul>\n                    <li><button className='my-button my-button-colorless nav-button text-white' id='myBtn'>ENTRAR</button>\n                    </li>\n                </ul>\n                <a className='icon'>\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </a>\n            </section>\n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react';\n\nconst ModalLogin = props => {\n    return (\n        <div id='myModal' className='modal'>\n\n            <div className='modal-content'>\n                <span className='close'>&times;</span>\n                <form action='/action_page.php'>\n                    <input type='text' id='user' value='' placeholder='Usuário' />\n                    <input type='text' id='key' value='' placeholder='Senha' />\n                    <input type='submit' value='Entrar' />\n                </form>\n            </div>\n\n        </div>\n    )\n}\n\nexport default ModalLogin","import React from 'react';\n\nconst InfoCaffeex = props => {\n    return (\n        <div>\n            <div className='slogan-trader my-flex my-justify-content-center my-flex-column my-align-items-center my-width-100'>\n                <div className='info'>\n                    <h4>tecnologia de comercialização\n                    ao alcance do trader</h4>\n                </div>\n            </div>\n            <section className='display-col my-flex my-justify-content-between'>\n                <div className='text-col'>\n                    <h4 className='my-h4'>SEGURANÇA</h4>\n                    <p>Na Plataforma Caffeex as ofertas são sempre firmes e vinculantes e eventuais discordâncias são\n                        resolvidas em uma câmara de arbitragem. Aceitou uma oferta, negócio fechado! Pode fazer seu\n                        hedge\n                        sem preocupação.</p>\n                </div>\n                <div className='text-col'>\n                    <h4 className='my-h4'>ALCANCE</h4>\n                    <p>Com alcance nacional, a plataforma aproxima o mercado permitindo que compradores e vendedores\n                        façam\n                        negócios de forma simples e eficiente. Seu próximo negócio está a cliques de distância.</p>\n                </div>\n                <div className='text-col'>\n                    <h4 className='my-h4'>EFICIENCIA</h4>\n                    <p>Na Plataforma Caffeex o trader tem inteiro controle sobre quem participa na sua oferta, sem\n                        restrição\n                        de quantidade de negociações simultâneas. Mais eficiência de preço, melhores resultados no\n                        negócio.</p>\n                </div>\n            </section>\n\n            <section className='half-green'>\n                <img src='./assets/imgs/screen.png' />\n\n            </section>\n\n            <section className='my-flex my-justify-content-center my-flex-column my-align-items-center my-width-100'>\n                <div className='info'>\n                    <h4>Quem confia na plataforma caffeex</h4>\n                    <p className='clients'>A Plataforma Caffeex conta com clientes de vários segmentos da cadeia do café,\n                        desde\n                        cooperativas,\n                        exportadores, grandes produtores, indústria, químicas até armazéns gerais. O business do café\n                        se\n                        encontra aqui.</p>\n                </div>\n            </section>\n        </div>\n\n    )\n}\n\nexport default InfoCaffeex","import React from 'react';\n\nconst Slogan = props => {\n    return (\n        <div className='slogan'>\n            <h3 className='text-white'> a primeira plataforma independente de\n                negociação de café verde entre\n                empresas no brasil\n            </h3>\n        </div>\n    )\n}\n\nexport default Slogan","import React from 'react';\n\nconst ButtonsInfo = props => {\n    return (\n        <div className='buttons'>\n            <button className='my-button my-button-green button-info'>SOLICITE UMA DEMONSTRAÇÃO</button>\n            <button className='my-button my-button-colorless button-more text-white'><img src='./assets/imgs/top.png' />\n                SAIBA\n                MAIS\n            </button>\n        </div>\n    )\n}\n\nexport default ButtonsInfo","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Nav from './components/nav';\nimport ModalLogin from './components/modal-login';\nimport InfoCaffeex from './components/info-caffeex';\nimport Slogan from './components/slogan';\nimport ButtonsInfo from './components/buttons-info'\n\nfunction App() {\n  return (\n    <div className='container' >\n            <div className='bg'>\n                <div className='bg-mask'>\n\n                    <header>\n                      <Nav/>\n                    </header>\n\n\n                    <div className='principal my-flex my-justify-content-center my-flex-column my-align-items-center my-width-100'>\n                        <Slogan/>\n\n                        <ButtonsInfo/>\n                    </div>\n                </div>\n            </div>\n\n            <InfoCaffeex/>\n\n\n            <footer>\n\n            </footer>\n            \n            <ModalLogin/>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}